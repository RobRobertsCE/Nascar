// Generated by Xamasoft JSON Class Generator
// http://www.xamasoft.com/json-class-generator

using System;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using JsonCSharpClassGenerator;

namespace Nascar.Models.Original
{

    public class Driver
    {
        private JObject __jobject;
        public Driver(JObject obj)
        {
            this.__jobject = obj;
        }

        public int DriverId
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "driver_id"));
            }
        }

        public string FullName
        {
            get
            {
                return JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(__jobject, "full_name"));
            }
        }

        public string FirstName
        {
            get
            {
                return JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(__jobject, "first_name"));
            }
        }

        public string LastName
        {
            get
            {
                return JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(__jobject, "last_name"));
            }
        }

        public bool IsInChase
        {
            get
            {
                return JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(__jobject, "is_in_chase"));
            }
        }

    }

    public class PitStop
    {
        private JObject __jobject;
        public PitStop(JObject obj)
        {
            this.__jobject = obj;
        }

        public int PositionsGainedLossed
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "positions_gained_lossed"));
            }
        }

        public double PitInElapsedTime
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "pit_in_elapsed_time"));
            }
        }

        public int PitInLapCount
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "pit_in_lap_count"));
            }
        }

        public int PitInLeaderLap
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "pit_in_leader_lap"));
            }
        }

        public double PitOutElapsedTime
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "pit_out_elapsed_time"));
            }
        }

    }

    public class Vehicle
    {
        private JObject __jobject;
        public Vehicle(JObject obj)
        {
            this.__jobject = obj;
        }

        public double AverageRestartSpeed
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "average_restart_speed"));
            }
        }

        public double AverageRunningPosition
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "average_running_position"));
            }
        }

        public double AverageSpeed
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "average_speed"));
            }
        }

        public int BestLap
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "best_lap"));
            }
        }

        public double BestLapSpeed
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "best_lap_speed"));
            }
        }

        public double BestLapTime
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "best_lap_time"));
            }
        }

        public string VehicleManufacturer
        {
            get
            {
                return JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(__jobject, "vehicle_manufacturer"));
            }
        }

        public string VehicleNumber
        {
            get
            {
                return JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(__jobject, "vehicle_number"));
            }
        }

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        private Driver _driver;
        public Driver Driver
        {
            get
            {
                if (_driver == null)
                    _driver = JsonClassHelper.ReadStronglyTypedObject<Driver>(JsonClassHelper.GetJToken<JObject>(__jobject, "driver"));
                return _driver;
            }
        }

        public double VehicleElapsedTime
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "vehicle_elapsed_time"));
            }
        }

        public int FastestLapsRun
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "fastest_laps_run"));
            }
        }

        public int LapsCompleted
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "laps_completed"));
            }
        }

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        private IList<object> _lapsLed;
        public IList<object> LapsLed
        {
            get
            {
                if (_lapsLed == null)
                    _lapsLed = (IList<object>)JsonClassHelper.ReadArray<object>(JsonClassHelper.GetJToken<JArray>(__jobject, "laps_led"), JsonClassHelper.ReadObject, typeof(IList<object>));
                return _lapsLed;
            }
        }

        public double LastLapSpeed
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "last_lap_speed"));
            }
        }

        public double LastLapTime
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "last_lap_time"));
            }
        }

        public int PassesMade
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "passes_made"));
            }
        }

        public int PassingDifferential
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "passing_differential"));
            }
        }

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        private IList<PitStop> _pitStops;
        public IList<PitStop> PitStops
        {
            get
            {
                if (_pitStops == null)
                    _pitStops = (IList<PitStop>)JsonClassHelper.ReadArray<PitStop>(JsonClassHelper.GetJToken<JArray>(__jobject, "pit_stops"), JsonClassHelper.ReadStronglyTypedObject<PitStop>, typeof(IList<PitStop>));
                return _pitStops;
            }
        }

        public int QualifyingStatus
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "qualifying_status"));
            }
        }

        public int RunningPosition
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "running_position"));
            }
        }

        public int Status
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "status"));
            }
        }

        public double Delta
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "delta"));
            }
        }

        public string SponsorName
        {
            get
            {
                return JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(__jobject, "sponsor_name"));
            }
        }

        public int StartingPosition
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "starting_position"));
            }
        }

        public int TimesPassed
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "times_passed"));
            }
        }

        public int QualityPasses
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "quality_passes"));
            }
        }

        public bool IsOnTrack
        {
            get
            {
                return JsonClassHelper.ReadBoolean(JsonClassHelper.GetJToken<JValue>(__jobject, "is_on_track"));
            }
        }

    }

    public class LiveFeedModel
    {

        public LiveFeedModel(string json)
            : this(JObject.Parse(json))
        {
        }

        private JObject __jobject;
        public LiveFeedModel(JObject obj)
        {
            this.__jobject = obj;
        }

        public int LapNumber
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "lap_number"));
            }
        }

        public double ElapsedTime
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "elapsed_time"));
            }
        }

        public int FlagState
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "flag_state"));
            }
        }

        public int RaceId
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "race_id"));
            }
        }

        public int LapsInRace
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "laps_in_race"));
            }
        }

        public int LapsToGo
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "laps_to_go"));
            }
        }

        [System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
        private IList<Vehicle> _vehicles;
        public IList<Vehicle> Vehicles
        {
            get
            {
                if (_vehicles == null)
                    _vehicles = (IList<Vehicle>)JsonClassHelper.ReadArray<Vehicle>(JsonClassHelper.GetJToken<JArray>(__jobject, "vehicles"), JsonClassHelper.ReadStronglyTypedObject<Vehicle>, typeof(IList<Vehicle>));
                return _vehicles;
            }
        }

        public int RunId
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "run_id"));
            }
        }

        public string RunName
        {
            get
            {
                return JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(__jobject, "run_name"));
            }
        }

        public int SeriesId
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "series_id"));
            }
        }

        public double TimeOfDay
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "time_of_day"));
            }
        }

        public int TrackId
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "track_id"));
            }
        }

        public double TrackLength
        {
            get
            {
                return JsonClassHelper.ReadFloat(JsonClassHelper.GetJToken<JValue>(__jobject, "track_length"));
            }
        }

        public string TrackName
        {
            get
            {
                return JsonClassHelper.ReadString(JsonClassHelper.GetJToken<JValue>(__jobject, "track_name"));
            }
        }

        public int RunType
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "run_type"));
            }
        }

        public int NumberOfCautionSegments
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "number_of_caution_segments"));
            }
        }

        public int NumberOfCautionLaps
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "number_of_caution_laps"));
            }
        }

        public int NumberOfLeadChanges
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "number_of_lead_changes"));
            }
        }

        public int NumberOfLeaders
        {
            get
            {
                return JsonClassHelper.ReadInteger(JsonClassHelper.GetJToken<JValue>(__jobject, "number_of_leaders"));
            }
        }

    }

}
